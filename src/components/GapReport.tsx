'use client';

import { useState } from 'react';
import { GapReport as GapReportType } from '../utils/reengineeringStore';

interface GapReportProps {
  report: GapReportType;
  repoName: string;
}

export default function GapReport({ report, repoName }: GapReportProps) {
  const [exportFormat, setExportFormat] = useState<'json' | 'markdown'>('markdown');

  const exportReport = () => {
    let content = '';
    let filename = '';

    if (exportFormat === 'json') {
      content = JSON.stringify(report, null, 2);
      filename = `${repoName}-gap-report.json`;
    } else {
      content = generateMarkdownReport();
      filename = `${repoName}-gap-report.md`;
    }

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateMarkdownReport = (): string => {
    const date = new Date(report.createdAt).toLocaleDateString();
    
    return `# Gap Analysis Report: ${repoName}

**Generated:** ${date}

## Executive Summary

${report.summary}

## Critical Gaps (High Priority)

${report.criticalGaps.length > 0 
  ? report.criticalGaps.map(gap => `- ${gap}`).join('\n')
  : '- No critical gaps identified'
}

## Medium Priority Gaps

${report.mediumGaps.length > 0 
  ? report.mediumGaps.map(gap => `- ${gap}`).join('\n')
  : '- No medium priority gaps identified'
}

## Low Priority Gaps

${report.lowGaps.length > 0 
  ? report.lowGaps.map(gap => `- ${gap}`).join('\n')
  : '- No low priority gaps identified'
}

## Recommendations

${report.recommendations.length > 0 
  ? report.recommendations.map(rec => `- ${rec}`).join('\n')
  : '- No specific recommendations generated'
}

---

*Report generated by Ultimate Blueprint Pilot Re-engineering Mode*
`;
  };

  const getPriorityColor = (priority: 'critical' | 'medium' | 'low') => {
    switch (priority) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getPriorityIcon = (priority: 'critical' | 'medium' | 'low') => {
    switch (priority) {
      case 'critical': return 'ðŸ”´';
      case 'medium': return 'ðŸŸ¡';
      case 'low': return 'ðŸŸ¢';
      default: return 'âšª';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-900">
          Gap Analysis Report
        </h2>
        <div className="flex items-center space-x-2">
          <select
            value={exportFormat}
            onChange={(e) => setExportFormat(e.target.value as 'json' | 'markdown')}
            className="text-sm border border-gray-300 rounded px-2 py-1"
          >
            <option value="markdown">Markdown</option>
            <option value="json">JSON</option>
          </select>
          <button
            onClick={exportReport}
            className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
          >
            Export
          </button>
        </div>
      </div>

      <div className="mb-4">
        <h3 className="text-lg font-semibold text-gray-800 mb-2">Executive Summary</h3>
        <p className="text-gray-700 bg-gray-50 p-3 rounded">
          {report.summary || 'No summary provided'}
        </p>
      </div>

      <div className="space-y-4">
        {/* Critical Gaps */}
        <div className={`border rounded-lg p-4 ${getPriorityColor('critical')}`}>
          <div className="flex items-center space-x-2 mb-3">
            <span className="text-lg">{getPriorityIcon('critical')}</span>
            <h4 className="font-semibold">Critical Gaps (High Priority)</h4>
            <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded">
              {report.criticalGaps.length}
            </span>
          </div>
          {report.criticalGaps.length > 0 ? (
            <ul className="space-y-1">
              {report.criticalGaps.map((gap, index) => (
                <li key={index} className="text-sm">â€¢ {gap}</li>
              ))}
            </ul>
          ) : (
            <p className="text-sm italic">No critical gaps identified</p>
          )}
        </div>

        {/* Medium Gaps */}
        <div className={`border rounded-lg p-4 ${getPriorityColor('medium')}`}>
          <div className="flex items-center space-x-2 mb-3">
            <span className="text-lg">{getPriorityIcon('medium')}</span>
            <h4 className="font-semibold">Medium Priority Gaps</h4>
            <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">
              {report.mediumGaps.length}
            </span>
          </div>
          {report.mediumGaps.length > 0 ? (
            <ul className="space-y-1">
              {report.mediumGaps.map((gap, index) => (
                <li key={index} className="text-sm">â€¢ {gap}</li>
              ))}
            </ul>
          ) : (
            <p className="text-sm italic">No medium priority gaps identified</p>
          )}
        </div>

        {/* Low Gaps */}
        <div className={`border rounded-lg p-4 ${getPriorityColor('low')}`}>
          <div className="flex items-center space-x-2 mb-3">
            <span className="text-lg">{getPriorityIcon('low')}</span>
            <h4 className="font-semibold">Low Priority Gaps</h4>
            <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
              {report.lowGaps.length}
            </span>
          </div>
          {report.lowGaps.length > 0 ? (
            <ul className="space-y-1">
              {report.lowGaps.map((gap, index) => (
                <li key={index} className="text-sm">â€¢ {gap}</li>
              ))}
            </ul>
          ) : (
            <p className="text-sm italic">No low priority gaps identified</p>
          )}
        </div>

        {/* Recommendations */}
        <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
          <div className="flex items-center space-x-2 mb-3">
            <span className="text-lg">ðŸ’¡</span>
            <h4 className="font-semibold text-blue-900">Recommendations</h4>
            <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
              {report.recommendations.length}
            </span>
          </div>
          {report.recommendations.length > 0 ? (
            <ul className="space-y-1">
              {report.recommendations.map((rec, index) => (
                <li key={index} className="text-sm text-blue-800">â€¢ {rec}</li>
              ))}
            </ul>
          ) : (
            <p className="text-sm italic text-blue-700">No specific recommendations generated</p>
          )}
        </div>
      </div>

      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="flex items-center justify-between text-sm text-gray-500">
          <span>Generated on {new Date(report.createdAt).toLocaleDateString()}</span>
          <span>Total gaps: {report.criticalGaps.length + report.mediumGaps.length + report.lowGaps.length}</span>
        </div>
      </div>
    </div>
  );
} 